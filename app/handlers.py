import logging
from datetime import datetime, time, timedelta

from telegram import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from app.config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

WORKING_HOURS_END = time(21, 0)  # Working hours end at 09:00 PM
DAYS_IN_WEEK = 7  # Number of days to show in the calendar

def get_next_valid_date(start_date: datetime) -> datetime:
    """Get the next valid date considering working hours."""
    if start_date.time() > WORKING_HOURS_END:
        start_date += timedelta(days=1)
    return start_date


def generate_dates(start_date: datetime, days: int) -> list[datetime]:
    """Generate dates within working hours for the next 'days' days."""
    dates = []
    current_date = get_next_valid_date(start_date)

    for _ in range(days):
        dates.append(current_date)
        current_date += timedelta(days=1)
    return dates

class Handlers:
    def __init__(self, db):
        self.db = db

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(
            "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ Holy Coffee bot ‚ú®‚ú®‚ú® –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /select_date, —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —ñ–≥—Ä–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É üö™"
        )

    # Date selection logic
    async def select_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        now = datetime.now()

        available_dates = generate_dates(now, DAYS_IN_WEEK)

        keyboard = [
            [
                InlineKeyboardButton(
                    date.strftime("%Y-%m-%d"), callback_data=date.strftime("%Y-%m-%d")
                )
            ]
            for date in available_dates
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è üìÜ", reply_markup=reply_markup
        )

    async def handle_date_selection(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        query = update.callback_query
        await query.answer()

        # Store the selected date
        date = query.data
        context.user_data["selected_date"] = date

        # Notify the user of the selected date
        await query.edit_message_text(
            text=f"–î–∞—Ç–∞ –æ–±—Ä–∞–Ω–∞: {date} üìÖ\n–®—É–∫–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏... ‚è≥"
        )

        # Call the reserve handler and pass the query as an argument
        await self.reserve(update, context, query=query)

    # Slot selection logic
    async def reserve(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, query=None
    ) -> None:
        date = context.user_data.get("selected_date")
        if not date:
            if query:
                await query.message.reply_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /select_date üôè"
                )
            else:
                await update.message.reply_text(
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /select_date üôè"
                )
            return

        available_slots = self.db.get_available_slots(date)
        if not available_slots:
            if query:
                await query.message.reply_text(
                    f"–ù–∞ –∂–∞–ª—å, –Ω–∞ {date} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å üò• –ú–æ–∂–ª–∏–≤–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É?üòâÔ∏è"
                )
            else:
                await update.message.reply_text(
                    f"–ù–∞ –∂–∞–ª—å, –Ω–∞ {date} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å üò• –ú–æ–∂–ª–∏–≤–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É?üòâÔ∏è"
                )
            return

        keyboard = [
            [InlineKeyboardButton(slot, callback_data=f"{date} {slot}")]
            for slot in available_slots
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query:
            await query.message.reply_text(
                f"–í—ñ–ª—å–Ω—ñ –º—ñ—Å—Ü—è –Ω–∞ {date} ‚úî", reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"–í—ñ–ª—å–Ω—ñ –º—ñ—Å—Ü—è –Ω–∞ {date} ‚úî", reply_markup=reply_markup
            )

    async def handle_slot_selection(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        query = update.callback_query
        await query.answer()

        date, slot = query.data.split()
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name

        reservation_id = self.db.reserve_slot(date, slot, user_id, username)

        if reservation_id:
            await query.edit_message_text(
                text=f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –Ω–∞ {date} –æ {slot}! ‚úÖüéâ"
            )
            context.user_data["reservation_id"] = reservation_id
            context.user_data["slot_selected"] = True

            # Ask for user details
            await self.ask_user_details(query, context)
        else:
            await query.edit_message_text(
                text=f"–ù–∞ –∂–∞–ª—å, {slot} {date} –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ. üòî‚ùå"
            )

    # User details logic
    async def ask_user_details(
        self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Ask the user for their phone number, surname, and name."""
        if not context.user_data.get("slot_selected"):
            return

        await query.message.reply_text(
            text=(
                "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! üéâ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:\n\n"
                "1. –Ü–º'—è üë§\n"
                "2. –ü—Ä—ñ–∑–≤–∏—â–µ üìù\n"
                "3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n\n"
                "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "`–Ü–º'—è, –ü—Ä—ñ–∑–≤–∏—â–µ, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É`\n"
            ),
            parse_mode="Markdown",
        )

    async def handle_user_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle the user's reply with their details."""
        user_details = update.message.text.strip()  # Correctly use update.message
        name, surname, phone = [item.strip() for item in user_details.split(",")]

        # Save details to the database or update reservation
        reservation_id = context.user_data.get("reservation_id")
        if reservation_id:
            self.db.update_user_details(reservation_id, name, surname, phone)
            await update.message.reply_text(
                text="–î—è–∫—É—î–º–æ! –í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. üòä‚úÖ"
            )

            # Ask payment preference after saving user details
            await self.ask_payment_preference(update, context)
        else:
            await update.message.reply_text(
                text="–°—Ö–æ–∂–µ, –≤–∞—à ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å–ª–æ—Ç —â–µ —Ä–∞–∑. üìûüõ†Ô∏è"
            )

    # Payments logic
    async def ask_payment_preference(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Ask the user for their payment preference."""
        keyboard = [
            [
                InlineKeyboardButton(
                    "–û–ø–ª–∞—Ç–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω üí≥", callback_data="payment:online"
                ),
                InlineKeyboardButton(
                    "–û–ø–ª–∞—Ç–∏—Ç–∏ –≤ –∫–∞—Ñ–µ ‚òï", callback_data="payment:cafe"
                ),
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text="–Ø–∫ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —Å–≤–æ—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è? üí≥‚òï",
            reply_markup=reply_markup,
        )

    async def handle_payment_choice(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        query = update.callback_query
        await query.answer()

        choice = query.data.split(":")[1]  # Extract 'online' or 'cafe'
        reservation_id = context.user_data.get("reservation_id")
        user_id = query.from_user.id

        if not reservation_id:
            await update.message.reply_text(
                text="–°—Ö–æ–∂–µ, –≤–∞—à ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å–ª–æ—Ç —â–µ —Ä–∞–∑. üìûüõ†Ô∏è"
            )
            return

        if choice == "online":
            self.db.update_payment_status(
                reservation_id, "paid", f"payment_{user_id}_{reservation_id}", "–û–Ω–ª–∞–π–Ω"
            )
            await query.edit_message_text(
                text=(
                    "–í–∏ –æ–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –æ–Ω–ª–∞–π–Ω. üñ•Ô∏èüí≥ –û—Å—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n\n"
                    "IBAN: UA123456789012345678901234567\n"
                    "–ê–±–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: 1234 5678 9012 3456\n\n"
                    "üìå –£ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É –û–ë–û–í'–Ø–ó–ö–û–í–û –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É, –æ–±—Ä–∞–Ω–∏–π —á–∞—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ.\n\n"
                    "–î—è–∫—É—î–º–æ! –ß–µ–∫–∞—î–º–æ –≤ Holy Coffee üòä‚òï"
                )
            )

        elif choice == "cafe":
            self.db.update_payment_status(reservation_id, "pending", None, "–í –∫–∞—Ñ–µ")
            await query.edit_message_text(
                text="–í–∏ –æ–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –≤ –∫–∞—Ñ–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—Ö–æ–¥—å—Ç–µ –≤—á–∞—Å–Ω–æ. üòä‚òï"
            )

    # User reservation view logic
    async def view_user_current_reservations(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        user_id = update.message.from_user.id

        reservations = self.db.get_user_current_reservations(user_id)
        if not reservations:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å. üòî")
            return

        message = "–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n\n"
        for reservation in reservations:
            slot = reservation["slot"]
            date = reservation["date"]
            created_at = reservation["created_at"]
            try:
                created_at_dt = datetime.fromisoformat(created_at)
                formatted_created_at = created_at_dt.strftime("%d.%m.%Y %H:%M")
            except ValueError:
                formatted_created_at = "–ù–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å"

            message += (
                f"üìÖ –î–∞—Ç–∞: *{date}*\n"
                f"‚è∞ –ß–∞—Å: *{slot}*\n"
                f"üìù –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ: {formatted_created_at}\n"
                f"-----------------------\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown")

    async def view_user_all_reservations(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        user_id = update.message.from_user.id

        reservations = self.db.get_all_user_reservations(user_id)
        if not reservations:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –±—Ä–æ–Ω—é–≤–∞–Ω—å. üòî")
            return

        message = "–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å:\n\n"
        for reservation in reservations:
            slot = reservation["slot"]
            date = reservation["date"]
            created_at = reservation["created_at"]
            try:
                created_at_dt = datetime.fromisoformat(created_at)
                formatted_created_at = created_at_dt.strftime("%d.%m.%Y %H:%M")
            except ValueError:
                formatted_created_at = "–ù–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å"

            message += (
                f"üìÖ –î–∞—Ç–∞: *{date}*\n"
                f"‚è∞ –ß–∞—Å: *{slot}*\n"
                f"üìù –ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ: {formatted_created_at}\n"
                f"-----------------------\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown")

    # User canceling reservation logic
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        self.db.cancel_reservations(user_id)
        await update.message.reply_text("–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. ‚ùå")

    async def cancel_reservation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        user_id = update.message.from_user.id

        # Fetch all user reservations
        reservations = self.db.get_user_current_reservations(user_id)
        if not reservations:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å. üòî")
            return

        # Build InlineKeyboard with reservation details
        keyboard = [
            [
                InlineKeyboardButton(
                    f"üìÖ {reservation["date"]} ‚è∞ {reservation["slot"]}",  # Display: Date and Slot
                    callback_data=f"cancel:{reservation["date"]}:{reservation["slot"]}",  # Data: cancel:date:slot
                )
            ]
            for reservation in reservations
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: ‚¨á", reply_markup=reply_markup
        )

    async def handle_cancel_reservation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        query = update.callback_query
        await query.answer()

        # Extract "cancel", date, and slot using maxsplit
        prefix, date, slot = query.data.split(":", 2)
        if prefix != "cancel":
            raise ValueError("–î–∞–Ω—ñ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –Ω–µ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 'cancel'")

        user_id = query.from_user.id

        if self.db.cancel_slot(user_id, date, slot):
            await query.edit_message_text(
                text=f"–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {date} –æ {slot} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. ‚ùå"
            )
        else:
            await query.edit_message_text(
                text=f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {date} –æ {slot}. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –Ω–µ —ñ—Å–Ω—É—î. ‚ö†Ô∏è"
            )
